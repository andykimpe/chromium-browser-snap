name: chromium
adopt-info: chromium
summary: Chromium web browser, open-source version of Chrome
source-code: https://code.launchpad.net/~chromium-team/chromium-browser/+git/snap-from-source/+ref/dev
description: |
 An open-source browser project that aims to build a safer, faster, and more
 stable way for all Internet users to experience the web.
confinement: strict
base: core22
assumes:
  - snapd2.55 # >=2.55 needed for the cups interface
compression: lzo

apps:
  chromium:
    extensions: [gnome]
    command: bin/chromium.launcher
    desktop: bin/chromium.desktop
    common-id: chromium-browser.desktop
    environment:
      CHROME_DESKTOP: chromium.desktop
      CHROME_CONFIG_HOME: $SNAP_USER_COMMON
      GTK_USE_PORTAL: 1
      GFX_FEATURE_FILE: $SNAP_USER_COMMON/igfx_user_feature.txt
      SPA_PLUGIN_DIR: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET/spa-0.2
      PIPEWIRE_CONFIG_NAME: $SNAP/usr/share/pipewire/pipewire.conf
      PIPEWIRE_MODULE_DIR: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET/pipewire-0.3
      MINIGBM_DEBUG: 1
    plugs:
      - audio-playback
      - audio-record
      - bluez # for Web Bluetooth (https://launchpad.net/bugs/1887201)
      - camera
      - cups
      - home
      - joystick
      - mount-observe
      - network
      - network-manager
      - password-manager-service
      - raw-usb # for WebUSB (https://launchpad.net/bugs/1780678)
      - removable-media
      - screen-inhibit-control
      - system-packages-doc
      - u2f-devices
      - unity7 # required for xdg-open to work
      - upower-observe
    slots:
      - mpris
  chromedriver:
    extensions: [gnome]
    command: usr/lib/chromium-browser/chromedriver
    plugs:
      - network-bind
      # + all the plugs required by chromium, so that when chromedriver
      # executes chromium it inherits the correct set of permissions
      - audio-playback
      - audio-record
      - bluez
      - camera
      - cups
      - home
      - joystick
      - mount-observe
      - network
      - network-manager
      - password-manager-service
      - raw-usb
      - removable-media
      - screen-inhibit-control
      - system-packages-doc
      - u2f-devices
      - unity7
      - upower-observe
    slots:
      - mpris
  daemon:
    extensions: [gnome]
    daemon: simple
    command: bin/chromium.launcher
    command-chain:
      - bin/daemon.wrapper
      - snap/command-chain/desktop-launch
    restart-delay: 3s
    install-mode: disable
    environment:
      CHROME_CONFIG_HOME: $SNAP_USER_COMMON
      PIPEWIRE_CONFIG_NAME: $SNAP/usr/share/pipewire/pipewire.conf
      PIPEWIRE_MODULE_DIR: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET/pipewire-0.3
      SPA_PLUGIN_DIR: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET/spa-0.2
    plugs:
      - audio-playback
      - audio-record
      - bluez # for Web Bluetooth (https://launchpad.net/bugs/1887201)
      - camera
      - cups
      - home
      - joystick
      - mount-observe
      - network
      - network-manager
      - password-manager-service
      - raw-usb # for WebUSB (https://launchpad.net/bugs/1780678)
      - removable-media
      - screen-inhibit-control
      - system-packages-doc
      - u2f-devices
      - unity7 # required for xdg-open to work
      - upower-observe

plugs:
  # This is not used or needed for anything other than to trigger automatic
  # installation of the cups snap via "default-provider: cups"
  foo-install-cups:
    interface: content
    content: foo
    default-provider: cups
    target: $SNAP_DATA/foo
  browser-sandbox:
    interface: browser-support
    allow-sandbox: true
  dot-local-share-applications:
    interface: personal-files
    write: [$HOME/.local/share/applications]
  chromium-config:
    interface: personal-files
    read: [$HOME/.config/chromium, $HOME/.chromium-browser.init]
  etc-chromium-browser-policies:
    interface: system-files
    read: [/etc/chromium-browser/policies]

layout:
  /usr/lib/man-db:
    bind: $SNAP/usr/lib/man-db
  /usr/share/libdrm:
    bind: $SNAP/gnome-platform/usr/share/libdrm

parts:
  # Launchpad builders have a timeout for how long they are allowed to access
  # the internet (through a proxy) starting from the start of the build.
  # Since the chromium part takes a long time to build, we need to ensure
  # that all other parts that need to access the internet (to e.g. fetch build
  # or stage packages) are built before it (before the proxy authentication is
  # revoked).

  chromium-build:
    plugin: dump
    source: build
    organize:
      '*' : build/
    override-prime: ""

  chromium:
    plugin: nil
    source: https://commondatastorage.googleapis.com/chromium-browser-official/chromium-118.0.5966.0.tar.xz
    source-checksum: sha512/07e297902b4214f4b30e5e91b3ab48c1485e579aecc971a5d091e559aebe65313a4dd97eee264eb1ec6ac56fb74e8535b19ba7384cbc6af00080630d7e28a21c
    after:
      - chromium-build
      - launcher
      - manpage
      - pipewire
      - va-drivers
    build-packages:
      - chrpath
      - cmake
      - default-jre-headless
      - elfutils
      - g++
      - git
      - gperf
      - gzip
      - libasound2-dev
      - libcap-dev
      - libcups2-dev
      - libcurl4-openssl-dev
      - libevdev-dev
      - libffi-dev
      - libicu-dev
      - libkrb5-dev
      - libnss3-dev
      - libpam0g-dev
      - libpci-dev
      - libssl-dev
      - libsystemd-dev
      - libva-dev
      - libwayland-dev
      - libxshmfence-dev
      - libxss-dev
      - lsb-release
      - make
      - mesa-common-dev
      - ninja-build
      - pkg-config
      - python3-pkg-resources
      - python3-xcbgen
      - quilt
      - qtbase5-dev
      - sed
      - subversion
      - wget
      - xcb-proto
      - yasm
    stage-packages:
      - libnss3
      - libxss1
    override-pull: |
      set -eux
      craftctl default
      . chrome/VERSION
      craftctl set version="$MAJOR.$MINOR.$BUILD.$PATCH"
    override-build: |
      set -eux

      QUILT_PATCHES=$CRAFT_STAGE/build/chromium-patches quilt push -a

      # Get the Node.js binaries needed to build chromium's WebUI
      third_party/node/update_node_binaries

      # Pre-built binaries are provided for clang on x86-64,
      # for all other architectures they have to be built from source.
      if [ $CRAFT_TARGET_ARCH = "amd64" ]; then
        python3 tools/clang/scripts/update.py
      else
        # --with-ml-inliner-model= to avoid depending on vpython3,
        # https://bugs.chromium.org/p/chromium/issues/detail?id=1368071
        if ! python3 tools/clang/scripts/build.py --skip-checkout --bootstrap \
             --disable-asserts --pgo --without-android --without-fuchsia \
             --use-system-cmake --with-ml-inliner-model=
        then
          # In ARMv7l this sometimes fails and asks to submit a bug report with
          # /tmp/CodeGen* files attached.
          tail -n+0 /tmp/CodeGen*
          exit 9
        fi
      fi

      # Build GN
      export CXX=$PWD/third_party/llvm-build/Release+Asserts/bin/clang++
      export AR=$PWD/third_party/llvm-build/Release+Asserts/bin/llvm-ar
      cp tools/gn/bootstrap/last_commit_position.h tools/gn/src/
      python3 tools/gn/bootstrap/bootstrap.py --skip-generate-buildfiles

      # Build chromium
      OUT=out/Release
      mkdir -p $OUT
      cp $CRAFT_STAGE/build/args.gn $OUT/
      if [ $CRAFT_TARGET_ARCH = "armhf" ]; then
        # Do not use lld (the LLVM linker) on 32-bits architectures
        # (armhf) because it OOMs when linking the chrome binary.
        # Use Gold instead.
        echo "use_lld = false"
        echo "use_gold = true"
        # Do not build with ThinLTO either, because it requires lld
        echo "use_thin_lto = false"
        # Do not build with NEON on armhf (https://launchpad.net/bugs/1884856)
        echo "arm_use_neon = false"
      elif [ $CRAFT_TARGET_ARCH = "amd64" ]; then
        # Necessary for video hardware-acceleration, should not be set on ARM
        # because it's not supposed to be used there and the build fails.
        echo 'use_system_minigbm = false'
        echo 'use_intel_minigbm = true'
        echo 'use_amdgpu_minigbm = true'
      fi >> $OUT/args.gn

      $OUT/gn gen $OUT
      ninja -C $OUT chrome chrome_sandbox chromedriver

      # Strip debug symbols off the chrome binary
      eu-strip $OUT/chrome

      # Install to $CRAFT_PART_INSTALL
      mkdir -p $CRAFT_PART_INSTALL
      cp chrome/app/theme/chromium/linux/product_logo_256.png $CRAFT_PART_INSTALL/chromium.png
      T=$CRAFT_PART_INSTALL/usr/lib/chromium-browser
      mkdir -p $T
      cd $OUT
      cp chrome chromedriver chrome_crashpad_handler \
          chrome_*.pak resources.pak \
          icudtl.dat \
          libEGL.so libGLESv2.so libffmpeg.so \
          libvk_swiftshader.so libvulkan.so.1 vk_swiftshader_icd.json \
          v8_context_snapshot.bin \
          $T/
      cp chrome_sandbox $T/chrome-sandbox
      mkdir $T/locales
      cp locales/*.pak $T/locales/
      if [ -d swiftshader ]; then
        # not built on arm*
        mkdir $T/swiftshader
        cp swiftshader/*.so $T/swiftshader/
      fi

      # Fix setuid bits on the sandbox executable
      # (ref: https://forum.snapcraft.io/t/call-for-testing-chromium-snap/1714/16)
      chmod 4555 $CRAFT_PART_INSTALL/usr/lib/chromium-browser/chrome-sandbox

      # Generate and install the man page (see the "manpage" part)
      mkdir -p $CRAFT_PART_INSTALL/man1
      sed \
          -e "s/@@PACKAGE@@/chromium/g" \
          -e "s/@@MENUNAME@@/chromium/g" \
          -e "s:\$HOME/.config:\$SNAP_USER_DATA/.config:g" \
          -e "s:\$HOME/.cache:\$SNAP_USER_COMMON/.cache:g" \
          $CRAFT_PART_SRC/chrome/app/resources/manpage.1.in \
          > $CRAFT_PART_INSTALL/man1/chrome.1
      gzip -9n $CRAFT_PART_INSTALL/man1/chrome.1
    stage:
      - -usr/lib/*/libsecret-*
    prime:
      - -etc/init.d
      - -etc/xdg
      - -usr/include
      - -usr/share/doc
      - -usr/share/lintian
      - -usr/share/man

  launcher:
    plugin: dump
    source: launcher
    organize:
      '*': bin/

  firstrun:
    plugin: dump
    source: firstrun
    organize:
      '*': firstrun/

  tests:
    plugin: dump
    source: tests
    organize:
      '*': tests/

  # Stage packages required for the "man" binary, which is invoked when
  # chromium is called with the "-h" (or "--help") argument
  # (see https://launchpad.net/bugs/1848083).
  manpage:
    plugin: nil
    stage-packages:
      - groff-base
      - libgdbm6
      - libpipeline1
      - man-db
    prime:
      - -etc
      - -usr/lib/tmpfiles.d
      - -usr/share/bug
      - -usr/share/calendar
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -usr/share/man
      - -usr/share/man-db
      - -var

  # Create a symlink xdg-email -> xdg-open, as the latter is perfectly able to
  # handle mailto: URLs (see https://launchpad.net/bugs/1849774).
  # xdg-open is a wrapper provided by the core snap.
  xdg-email:
    plugin: nil
    override-pull: ""
    override-prime: |
      set -eux
      mkdir -p usr/bin
      cd usr/bin
      ln -s /usr/bin/xdg-open xdg-email

  libsecret:
    source: https://gitlab.gnome.org/GNOME/libsecret.git
    source-depth: 1
    source-tag: '0.20.5'
    plugin: meson
    meson-parameters:
      - --prefix=/usr
      - -Dgtk_doc=false
      - -Dmanpage=false
      - -Dgcrypt=false  # https://gitlab.gnome.org/GNOME/libsecret/-/issues/49
    stage:
      - usr/lib/*/libsecret-*

  # VA-API drivers for HW-accelerated video decoding
  va-drivers:
    plugin: nil
    stage-packages:
      - mesa-va-drivers
      - on amd64:
        - i965-va-driver
        - intel-media-va-driver
    stage:
      - usr/lib/*/dri/*_video.so

  pipewire:
    plugin: nil
    build-packages: [libpipewire-0.3-dev]
    stage-packages: [pipewire]
    prime:
      - usr/lib/*/pipewire-*
      - usr/lib/*/spa-*
      - usr/lib/*/libpipewire*.so*
      - usr/share/pipewire
