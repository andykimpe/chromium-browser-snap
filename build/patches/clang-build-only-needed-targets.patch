Description: do not build unused clang tools
Author: Olivier Tilloy <olivier.tilloy@canonical.com>

--- a/tools/clang/scripts/update.py
+++ b/tools/clang/scripts/update.py
@@ -612,7 +612,7 @@ def UpdateClang(args):
 
   # Build lld and code coverage tools. This is done separately from the rest of
   # the build because these tools require threading support.
-  tools_with_threading = [ 'lld', 'llvm-cov', 'llvm-profdata' ]
+  tools_with_threading = [ 'lld' ]
   print 'Building the following tools with threading support: %s' % (
         str(tools_with_threading))
 
@@ -726,13 +726,6 @@ def UpdateClang(args):
                         '-DSANITIZER_MIN_OSX_VERSION="10.7"']
   # compiler-rt is part of the llvm checkout on Windows but a stand-alone
   # directory elsewhere, see the TODO above COMPILER_RT_DIR.
-  RmCmakeCache('.')
-  RunCommand(['cmake'] + compiler_rt_args +
-             [LLVM_DIR if sys.platform == 'win32' else COMPILER_RT_DIR],
-             msvc_arch='x86', env=deployment_env)
-  RunCommand(['ninja', 'compiler-rt'], msvc_arch='x86')
-  if sys.platform != 'win32':
-    RunCommand(['ninja', 'fuzzer'])
 
   # Copy select output to the main tree.
   # TODO(hans): Make this (and the .gypi and .isolate files) version number
@@ -752,25 +745,6 @@ def UpdateClang(args):
                                   VERSION, 'lib', platform)
   rt_lib_dst_dir = os.path.join(LLVM_BUILD_DIR, 'lib', 'clang', VERSION, 'lib',
                                 platform)
-  # Blacklists:
-  CopyDirectoryContents(os.path.join(rt_lib_src_dir, '..', '..', 'share'),
-                        os.path.join(rt_lib_dst_dir, '..', '..', 'share'))
-  # Headers:
-  if sys.platform != 'win32':
-    CopyDirectoryContents(
-        os.path.join(COMPILER_RT_BUILD_DIR, 'include/sanitizer'),
-        os.path.join(LLVM_BUILD_DIR, 'lib/clang', VERSION, 'include/sanitizer'))
-  # Static and dynamic libraries:
-  CopyDirectoryContents(rt_lib_src_dir, rt_lib_dst_dir)
-  if sys.platform == 'darwin':
-    for dylib in glob.glob(os.path.join(rt_lib_dst_dir, '*.dylib')):
-      # Fix LC_ID_DYLIB for the ASan dynamic libraries to be relative to
-      # @executable_path.
-      # TODO(glider): this is transitional. We'll need to fix the dylib
-      # name either in our build system, or in Clang. See also
-      # http://crbug.com/344836.
-      subprocess.call(['install_name_tool', '-id',
-                       '@executable_path/' + os.path.basename(dylib), dylib])
 
   if args.with_android:
     make_toolchain = os.path.join(
