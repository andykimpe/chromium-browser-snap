Description: We're not building from a git checkout, so DownloadPinnedClang() cannot work.
Author: Olivier Tilloy <olivier.tilloy@canonical.com>
Author: Nathan Pratta Teodosio <nathan.teodosio@canonical.com>
Forwarded: not-needed

--- a/tools/clang/scripts/build.py
+++ b/tools/clang/scripts/build.py
@@ -731,10 +731,6 @@ def main():
       '-DBUG_REPORT_URL=' + BUG_REPORT_URL,
       # See crbug.com/1126219: Use native symbolizer instead of DIA
       '-DLLVM_ENABLE_DIA_SDK=OFF',
-      # Link all binaries with lld. Effectively passes -fuse-ld=lld to the
-      # compiler driver. On Windows, cmake calls the linker directly, so there
-      # the same is achieved by passing -DCMAKE_LINKER=$lld below.
-      '-DLLVM_ENABLE_LLD=ON',
       # The default value differs per platform, force it off everywhere.
       '-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF',
       # Don't use curl.
@@ -774,7 +770,6 @@ def main():
     cc = args.host_cc
     cxx = args.host_cxx
   else:
-    DownloadPinnedClang()
     if sys.platform == 'win32':
       cc = os.path.join(PINNED_CLANG_DIR, 'bin', 'clang-cl.exe')
       cxx = os.path.join(PINNED_CLANG_DIR, 'bin', 'clang-cl.exe')
@@ -785,8 +780,8 @@ def main():
       cxx = cxx.replace('\\', '/')
       lld = lld.replace('\\', '/')
     else:
-      cc = os.path.join(PINNED_CLANG_DIR, 'bin', 'clang')
-      cxx = os.path.join(PINNED_CLANG_DIR, 'bin', 'clang++')
+      cc = '/usr/bin/gcc'
+      cxx = '/usr/bin/g++'
 
     if sys.platform.startswith('linux'):
       base_cmake_args += [ '-DLLVM_STATIC_LINK_CXX_STDLIB=ON' ]
@@ -900,6 +895,8 @@ def main():
     else:
       cc = os.path.join(LLVM_BOOTSTRAP_INSTALL_DIR, 'bin', 'clang')
       cxx = os.path.join(LLVM_BOOTSTRAP_INSTALL_DIR, 'bin', 'clang++')
+    if sys.platform.startswith('linux'):
+      base_cmake_args.append('-DLLVM_ENABLE_LLD=ON')
 
     print('Bootstrap compiler installed.')
 
