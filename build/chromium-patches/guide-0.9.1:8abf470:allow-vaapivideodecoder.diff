From 8abf470a5e9d475614d59542df7569bf63cb5ebc Mon Sep 17 00:00:00 2001
From: Jianhui Dai <jianhui.j.dai@intel.com>
Date: Wed, 28 Sep 2022 04:02:23 +0000
Subject: [PATCH] Allow `VaapiVideoDecoder` with GL on Linux

This CL checks the `gr_context_type`, and allows `VaapiVideoDecoder` if
GL is active. Before this CL, `VaapiVideoDecoder` is only allowed on
Vulkan.

Test: Video playback on Linux X11
Bug: 1236697
Change-Id: Ife400c76e21aff70fd5e26b4a0498e2a322dd635
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3752147
Reviewed-by: Ted (Chromium) Meyer <tmathmeyer@chromium.org>
Commit-Queue: Ted (Chromium) Meyer <tmathmeyer@chromium.org>
Reviewed-by: Sunny Sachanandani <sunnyps@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1052201}
---

diff --git a/components/viz/service/display_embedder/skia_output_surface_impl.cc b/components/viz/service/display_embedder/skia_output_surface_impl.cc
index f0d12ff..d535944 100644
--- a/components/viz/service/display_embedder/skia_output_surface_impl.cc
+++ b/components/viz/service/display_embedder/skia_output_surface_impl.cc
@@ -1180,7 +1180,11 @@
     return GrBackendFormat::MakeMtl(ToMTLPixelFormat(resource_format));
 #endif
   } else {
+#if !BUILDFLAG(IS_LINUX)
+    // Skip the check as ycbcr info is always set by `VaapiVideoDecoder` on
+    // Linux.
     DCHECK(!ycbcr_info);
+#endif
     // Convert internal format from GLES2 to platform GL.
     unsigned int texture_storage_format = gpu::GetGrGLBackendTextureFormat(
         impl_on_gpu_->GetFeatureInfo(), resource_format,
diff --git a/media/mojo/services/gpu_mojo_media_client_cros.cc b/media/mojo/services/gpu_mojo_media_client_cros.cc
index 7278c05..55f2f11 100644
--- a/media/mojo/services/gpu_mojo_media_client_cros.cc
+++ b/media/mojo/services/gpu_mojo_media_client_cros.cc
@@ -52,8 +52,8 @@
   if (!base::FeatureList::IsEnabled(kVaapiVideoDecodeLinux))
     return VideoDecoderType::kUnknown;
 
-  // Regardless of vulkan support, if direct video decoder is disabled, revert
-  // to using the VDA implementation.
+  // If direct video decoder is disabled, revert to using the VDA
+  // implementation.
   if (!base::FeatureList::IsEnabled(kUseChromeOSDirectVideoDecoder))
     return VideoDecoderType::kVda;
   return VideoDecoderType::kVaapi;
@@ -77,8 +77,12 @@
                  : VideoDecoderType::kUnknown;
     }
     case VideoDecoderType::kVaapi: {
+      // Allow VaapiVideoDecoder on GL.
+      if (gpu_preferences.gr_context_type == gpu::GrContextType::kGL)
+        return VideoDecoderType::kVaapi;
       if (gpu_preferences.gr_context_type != gpu::GrContextType::kVulkan)
         return VideoDecoderType::kUnknown;
+      // If Vulkan is active, check Vulkan info if VaapiVideoDecoder is allowed.
       if (!gpu_info.vulkan_info.has_value())
         return VideoDecoderType::kUnknown;
       if (gpu_info.vulkan_info->physical_devices.empty())
