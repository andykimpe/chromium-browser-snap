Description: Fix use of undeclared identifier 'HWCAP2_MTE'.
 .
 "When CONFIG_ARM64_MTE is selected and Memory Tagging Extension is supported by
  the hardware, the kernel advertises the feature to userspace via HWCAP2_MTE."
 .
 C.f. https://www.kernel.org/doc/html/latest/arm64/memory-tagging-extension.html
 .
Author: Nathan Pratta Teodosio <nathan.teodosio@canonical.com>
Forwarded: https://chromium-review.googlesource.com/c/chromium/src/+/4610745

--- a/base/allocator/partition_allocator/tagging.cc
+++ b/base/allocator/partition_allocator/tagging.cc
@@ -194,25 +194,31 @@

 extern "C" TagMemoryRangeIncrementInternalFn(
     *ResolveTagMemoryRangeIncrement(uint64_t hwcap, struct __ifunc_arg_t* hw)) {
+#ifdef HWCAP2_MTE
   if ((hwcap & _IFUNC_ARG_HWCAP) && (hw->_hwcap2 & HWCAP2_MTE)) {
     return TagRegionIncrementForMTE;
   }
+#endif
   return TagRegionIncrementNoOp;
 }
 
 extern "C" TagMemoryRangeRandomlyInternalFn(
     *ResolveTagMemoryRandomly(uint64_t hwcap, struct __ifunc_arg_t* hw)) {
+#ifdef HWCAP2_MTE
   if ((hwcap & _IFUNC_ARG_HWCAP) && (hw->_hwcap2 & HWCAP2_MTE)) {
     return TagRegionRandomlyForMTE;
   }
+#endif
   return TagRegionRandomlyNoOp;
 }
 
 extern "C" RemaskPtrInternalFn(
     *ResolveRemaskPointer(uint64_t hwcap, struct __ifunc_arg_t* hw)) {
+#ifdef HWCAP2_MTE
   if ((hwcap & _IFUNC_ARG_HWCAP) && (hw->_hwcap2 & HWCAP2_MTE)) {
     return RemaskVoidPtrForMTE;
   }
+#endif
   return RemaskVoidPtrNoOp;
 }
 
