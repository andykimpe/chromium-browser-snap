Description: Disable crash pad, otherwise Chromium fails to launch.
 Only branded builds are meant to ship it.
Ubuntu-bug: https://launchpad.net/bugs/1993581
Author: Nathan Pratta Teodosio <nathan.teodosio@canonical.com>
Forwarded: no
--- b/chrome/app/chrome_main_delegate.cc
+++ a/chrome/app/chrome_main_delegate.cc
@@ -142,7 +142,6 @@
 
 #if BUILDFLAG(IS_CHROMEOS)
 #include "chromeos/dbus/constants/dbus_paths.h"
-#include "components/crash/core/app/breakpad_linux.h"
 #endif
 
 #if BUILDFLAG(IS_CHROMEOS_ASH)
@@ -175,6 +174,7 @@
 #endif
 
 #if BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_MAC) && !BUILDFLAG(IS_ANDROID)
+#include "components/crash/core/app/breakpad_linux.h"
 #include "v8/include/v8-wasm-trap-handler-posix.h"
 #include "v8/include/v8.h"
 #endif
@@ -845,8 +845,8 @@
       (channel == version_info::Channel::CANARY ||
        channel == version_info::Channel::DEV);
   // GWP-ASAN requires crashpad to gather alloc/dealloc stack traces, which is
+  // not always enabled on Linux/ChromeOS.
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
-  // not always enabled on ChromeOS.
-#if BUILDFLAG(IS_CHROMEOS)
   bool enable_gwp_asan = crash_reporter::IsCrashpadEnabled();
 #else
   bool enable_gwp_asan = true;
@@ -997,7 +997,7 @@
   v8_crashpad_support::SetUp();
 #endif
 
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
-#if BUILDFLAG(IS_CHROMEOS)
   if (!crash_reporter::IsCrashpadEnabled()) {
     breakpad::SetFirstChanceExceptionHandler(v8::TryHandleWebAssemblyTrapPosix);
   }
@@ -1451,7 +1451,7 @@
     } else {
       base::android::InitJavaExceptionReporterForChildProcess();
     }
+#else   // !BUILDFLAG(IS_ANDROID)
-#elif BUILDFLAG(IS_CHROMEOS)
     if (crash_reporter::IsCrashpadEnabled()) {
       crash_reporter::InitializeCrashpad(process_type.empty(), process_type);
       crash_reporter::SetFirstChanceExceptionHandler(
@@ -1459,10 +1459,6 @@
     } else {
       breakpad::InitCrashReporter(process_type);
     }
-#else
-    crash_reporter::InitializeCrashpad(process_type.empty(), process_type);
-    crash_reporter::SetFirstChanceExceptionHandler(
-        v8::TryHandleWebAssemblyTrapPosix);
 #endif  // BUILDFLAG(IS_ANDROID)
   }
 #endif  // BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_MAC)
@@ -1580,7 +1576,6 @@
       base::CommandLine::ForCurrentProcess();
   std::string process_type =
       command_line->GetSwitchValueASCII(switches::kProcessType);
-#if BUILDFLAG(IS_CHROMEOS)
   if (crash_reporter::IsCrashpadEnabled()) {
     crash_reporter::InitializeCrashpad(false, process_type);
     crash_reporter::SetFirstChanceExceptionHandler(
@@ -1588,11 +1583,6 @@
   } else {
     breakpad::InitCrashReporter(process_type);
   }
-#else
-  crash_reporter::InitializeCrashpad(false, process_type);
-  crash_reporter::SetFirstChanceExceptionHandler(
-      v8::TryHandleWebAssemblyTrapPosix);
-#endif
 
   // Reset the command line for the newly spawned process.
   crash_keys::SetCrashKeysFromCommandLine(*command_line);
--- b/chrome/browser/BUILD.gn
+++ a/chrome/browser/BUILD.gn
@@ -4677,10 +4677,6 @@
       ]
     }
 
-    if (!is_fuchsia) {
-      deps += [ "//third_party/crashpad/crashpad/client:common" ]
-    }
-
     # On Windows, the hashes are embedded in //chrome:chrome_initial rather
     # than here in :chrome_dll.
     if (!is_win) {
--- b/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate_unittest.cc
+++ a/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate_unittest.cc
@@ -3332,8 +3332,16 @@
 }
 #endif  // BUILDFLAG(IS_ANDROID)
 
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
-#if BUILDFLAG(IS_CHROMEOS)
 TEST_F(ChromeBrowsingDataRemoverDelegateTest, WipeCrashData) {
+#if !BUILDFLAG(IS_CHROMEOS_ASH)
+  // This test applies only when using a logfile of Crash uploads. Chrome Linux
+  // will use Crashpad's database instead of the logfile. Chrome Chrome OS
+  // continues to use the logfile even when Crashpad is enabled.
+  if (crash_reporter::IsCrashpadEnabled()) {
+    GTEST_SKIP();
+  }
+#endif
   base::ScopedPathOverride override_crash_dumps(chrome::DIR_CRASH_DUMPS);
   base::FilePath crash_dir_path;
   base::PathService::Get(chrome::DIR_CRASH_DUMPS, &crash_dir_path);
--- b/chrome/browser/chrome_browser_main.cc
+++ a/chrome/browser/chrome_browser_main.cc
@@ -220,7 +220,6 @@
 #if BUILDFLAG(IS_CHROMEOS)
 #include "base/process/process.h"
 #include "base/task/task_traits.h"
-#include "components/crash/core/app/breakpad_linux.h"
 #endif  // BUILDFLAG(IS_CHROMEOS)
 
 #if !BUILDFLAG(IS_CHROMEOS_ASH)
@@ -244,6 +243,7 @@
 #endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS)
 
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+#include "components/crash/core/app/breakpad_linux.h"
 #include "components/crash/core/app/crashpad.h"
 #endif
 
@@ -1058,13 +1058,14 @@
   }
 #endif  // !BUILDFLAG(IS_ANDROID) && !BUILDFLAG(IS_CHROMEOS_ASH)
 
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_OPENBSD)
-#if BUILDFLAG(IS_CHROMEOS)
   // Set the product channel for crash reports.
   if (!crash_reporter::IsCrashpadEnabled()) {
     breakpad::SetChannelCrashKey(
         chrome::GetChannelName(chrome::WithExtendedStable(true)));
   }
+#endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) ||
+        // BUILDFLAG(IS_OPENBSD)
-#endif  // BUILDFLAG(IS_CHROMEOS)
 
 #if BUILDFLAG(IS_MAC)
 #if defined(ARCH_CPU_X86_64)
--- b/chrome/browser/chrome_content_browser_client.cc
+++ a/chrome/browser/chrome_content_browser_client.cc
@@ -436,13 +436,11 @@
 #endif  // !BUILDFLAG(IS_CHROMEOS_ASH)
 
 #if BUILDFLAG(IS_CHROMEOS)
-#include "base/debug/leak_annotations.h"
 #include "chrome/browser/chromeos/policy/dlp/dlp_scoped_file_access_delegate.h"
 #include "chrome/browser/chromeos/tablet_mode/chrome_content_browser_client_tablet_mode_part.h"
 #include "chrome/browser/policy/networking/policy_cert_service.h"
 #include "chrome/browser/policy/networking/policy_cert_service_factory.h"
 #include "chrome/common/chromeos/extensions/chromeos_system_extension_info.h"
-#include "components/crash/core/app/breakpad_linux.h"
 #include "third_party/cros_system_api/switches/chrome_switches.h"
 #endif
 
@@ -486,7 +484,11 @@
 #include "components/crash/core/app/crashpad.h"
 #endif
 
+#if BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_MAC)
+#if !BUILDFLAG(IS_ANDROID)
+#include "base/debug/leak_annotations.h"
+#include "components/crash/core/app/breakpad_linux.h"
+#endif  // !BUILDFLAG(IS_ANDROID)
-#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS)
 #include "components/crash/content/browser/crash_handler_host_linux.h"
 #endif
 
@@ -941,7 +943,7 @@
 int GetCrashSignalFD(const base::CommandLine& command_line) {
   return crashpad::CrashHandlerHost::Get()->GetDeathSignalSocket();
 }
+#elif BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_MAC)
-#elif BUILDFLAG(IS_CHROMEOS)
 breakpad::CrashHandlerHostLinux* CreateCrashHandlerHost(
     const std::string& process_type) {
   base::FilePath dumps_path;
@@ -1004,11 +1006,6 @@
 
   return -1;
 }
-#elif BUILDFLAG(IS_LINUX)
-int GetCrashSignalFD(const base::CommandLine& command_line) {
-  int fd;
-  return crash_reporter::GetHandlerSocket(&fd, nullptr) ? fd : -1;
-}
 #endif  // BUILDFLAG(IS_ANDROID)
 
 void SetApplicationLocaleOnIOThread(const std::string& locale) {
@@ -2395,7 +2392,7 @@
 #elif BUILDFLAG(IS_POSIX)
 #if BUILDFLAG(IS_ANDROID)
   bool enable_crash_reporter = true;
+#else
-#elif BUILDFLAG(IS_CHROMEOS)
   bool enable_crash_reporter = false;
   if (crash_reporter::IsCrashpadEnabled()) {
     command_line->AppendSwitch(switches::kEnableCrashpad);
@@ -2411,14 +2408,6 @@
   } else {
     enable_crash_reporter = breakpad::IsCrashReporterEnabled();
   }
-#else
-  bool enable_crash_reporter = true;
-  pid_t pid;
-  if (crash_reporter::GetHandlerSocket(nullptr, &pid)) {
-    command_line->AppendSwitchASCII(
-        crash_reporter::switches::kCrashpadHandlerPid,
-        base::NumberToString(pid));
-  }
 #endif
   if (enable_crash_reporter) {
     std::string switch_value;
@@ -4241,14 +4230,10 @@
   base::PathService::Get(base::DIR_ANDROID_APP_DATA, &app_data_path);
   DCHECK(!app_data_path.empty());
 #endif  // BUILDFLAG(IS_ANDROID)
-
-#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
   int crash_signal_fd = GetCrashSignalFD(command_line);
   if (crash_signal_fd >= 0) {
     mappings->Share(kCrashDumpSignal, crash_signal_fd);
   }
-#endif  // BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_LINUX) ||
-        // BUILDFLAG(IS_CHROMEOS)
 }
 #endif  // BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_MAC)
 
--- b/chrome/browser/crash_upload_list/crash_upload_list.cc
+++ a/chrome/browser/crash_upload_list/crash_upload_list.cc
@@ -33,7 +33,9 @@
 #endif
 
 scoped_refptr<UploadList> CreateCrashUploadList() {
+#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
+  return new CrashUploadListCrashpad();
+#elif BUILDFLAG(IS_ANDROID)
-#if BUILDFLAG(IS_ANDROID)
   base::FilePath cache_dir;
   base::android::GetCacheDirectory(&cache_dir);
   base::FilePath upload_log_path =
@@ -42,7 +44,17 @@
   return new CrashUploadListAndroid(upload_log_path);
 #elif BUILDFLAG(IS_FUCHSIA)
   return new CrashUploadListFuchsia();
+#else
+
+// ChromeOS uses crash_sender as its uploader even when Crashpad is enabled,
+// which isn't compatible with CrashUploadListCrashpad. crash_sender continues
+// to log uploads in CrashUploadList::kReporterLogFilename.
+// Linux is handled below.
+#if !(BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX))
+  if (crash_reporter::IsCrashpadEnabled()) {
+    return new CrashUploadListCrashpad();
+  }
+#endif
-#elif BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX)
 
   base::FilePath crash_dir_path;
   base::PathService::Get(chrome::DIR_CRASH_DUMPS, &crash_dir_path);
@@ -52,17 +64,16 @@
       base::MakeRefCounted<TextLogUploadList>(upload_log_path);
 
 #if BUILDFLAG(IS_LINUX)
+  if (crash_reporter::IsCrashpadEnabled()) {
+    // Crashpad keeps the records of C++ crashes (segfaults, etc) in its
+    // internal database. The JavaScript error reporter writes JS error upload
+    // records to the older text format. Combine the two to present a complete
+    // list to the user.
+    std::vector<scoped_refptr<UploadList>> uploaders = {
+        base::MakeRefCounted<CrashUploadListCrashpad>(), std::move(result)};
+    result = base::MakeRefCounted<CombiningUploadList>(std::move(uploaders));
+  }
+#endif
-  // Crashpad keeps the records of C++ crashes (segfaults, etc) in its
-  // internal database. The JavaScript error reporter writes JS error upload
-  // records to the older text format. Combine the two to present a complete
-  // list to the user.
-  std::vector<scoped_refptr<UploadList>> uploaders = {
-      base::MakeRefCounted<CrashUploadListCrashpad>(), std::move(result)};
-  result = base::MakeRefCounted<CombiningUploadList>(std::move(uploaders));
-#endif  // BUILDFLAG(IS_LINUX)
   return result;
+#endif  // BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
-
-#else
-  return new CrashUploadListCrashpad();
-#endif  // BUILDFLAG(IS_ANDROID)
 }
--- b/chrome/browser/google/google_update_settings_posix.cc
+++ a/chrome/browser/google/google_update_settings_posix.cc
@@ -76,8 +76,14 @@
 
 // static
 bool GoogleUpdateSettings::SetCollectStatsConsent(bool consented) {
+#if BUILDFLAG(IS_MAC)
-#if BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX)
   crash_reporter::SetUploadConsent(consented);
+// TODO(crbug.com/1052397): Revisit the macro expression once build flag switch
+// of lacros-chrome is complete.
+#elif BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS)
+  if (crash_reporter::IsCrashpadEnabled()) {
+    crash_reporter::SetUploadConsent(consented);
+  }
 #endif
 
   base::FilePath consent_dir;
--- b/chrome/browser/metrics/chrome_metrics_service_client.cc
+++ a/chrome/browser/metrics/chrome_metrics_service_client.cc
@@ -181,7 +181,7 @@
 #endif
 
 #if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_ANDROID)
+#include "third_party/crashpad/crashpad/client/crashpad_info.h"
-#include "third_party/crashpad/crashpad/client/crashpad_info.h"  // nogncheck
 #endif
 
 #if !BUILDFLAG(IS_CHROMEOS_ASH)
--- b/chrome/browser/ui/views/first_run_dialog.cc
+++ a/chrome/browser/ui/views/first_run_dialog.cc
@@ -22,6 +22,7 @@
 #include "chrome/common/url_constants.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
+#include "components/crash/core/app/breakpad_linux.h"
 #include "components/crash/core/app/crashpad.h"
 #include "components/strings/grit/components_strings.h"
 #include "ui/base/l10n/l10n_util.h"
@@ -32,6 +33,17 @@
 #include "ui/views/widget/widget.h"
 #include "ui/views/window/dialog_delegate.h"
 
+namespace {
+
+#if !BUILDFLAG(IS_MAC)
+void InitCrashReporterIfEnabled(bool enabled) {
+  if (!crash_reporter::IsCrashpadEnabled() && enabled)
+    breakpad::InitCrashReporter(std::string());
+}
+#endif
+
+}  // namespace
+
 namespace first_run {
 
 void ShowFirstRunDialog() {
@@ -115,7 +127,13 @@
   GetWidget()->Hide();
   closed_through_accept_button_ = true;
 
+#if BUILDFLAG(IS_MAC)
   ChangeMetricsReportingState(report_crashes_->GetChecked());
+#else
+  ChangeMetricsReportingStateWithReply(
+      report_crashes_->GetChecked(),
+      base::BindOnce(&InitCrashReporterIfEnabled));
+#endif
 
   if (make_default_->GetChecked())
     shell_integration::SetAsDefaultBrowser();
--- b/chrome/browser/ui/webui/crashes_ui.cc
+++ a/chrome/browser/ui/webui/crashes_ui.cc
@@ -186,6 +186,17 @@
   system_crash_reporter = true;
 #endif
 
+  bool using_crashpad = false;
+#if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_ANDROID)
+  using_crashpad = true;
+// TODO(crbug.com/1052397): Revisit the macro expression once build flag switch
+// of lacros-chrome is complete.
+#elif BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS)
+  // ChromeOS uses crash_sender instead of Crashpad for uploads even when
+  // Crashpad is enabled for dump generation.
+  using_crashpad = crash_reporter::IsCrashpadEnabled();
+#endif
+
   bool is_internal = false;
   auto* identity_manager =
       IdentityManagerFactory::GetForProfile(Profile::FromWebUI(web_ui()));
@@ -195,18 +206,15 @@
             .email);
   }
 
+  // Manual uploads currently are supported only for Crashpad-using platforms
+  // and only if crash uploads are not disabled by policy.
+  bool support_manual_uploads =
+      using_crashpad &&
-  bool manual_uploads_supported = false;
-#if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX) || \
-    BUILDFLAG(IS_ANDROID)
-  manual_uploads_supported = true;
-#endif
-  bool allow_manual_uploads =
-      manual_uploads_supported &&
       (crash_reporting_enabled || !IsMetricsReportingPolicyManaged());
 
+  // Show crash reports regardless of |crash_reporting_enabled| when using
+  // Crashpad so that users can manually upload those reports.
+  bool upload_list = using_crashpad || crash_reporting_enabled;
-  // Show crash reports regardless of |crash_reporting_enabled| when it is
-  // possible to manually upload reports.
-  bool upload_list = manual_uploads_supported || crash_reporting_enabled;
 
   base::Value::List crash_list;
   if (upload_list)
@@ -215,7 +223,7 @@
   base::Value::Dict result;
   result.Set("enabled", crash_reporting_enabled);
   result.Set("dynamicBackend", system_crash_reporter);
+  result.Set("manualUploads", support_manual_uploads);
-  result.Set("manualUploads", allow_manual_uploads);
   result.Set("crashes", std::move(crash_list));
   result.Set("version", version_info::GetVersionNumber());
   result.Set("os", base::SysInfo::OperatingSystemName() + " " +
--- b/chrome/test/BUILD.gn
+++ a/chrome/test/BUILD.gn
@@ -335,10 +335,6 @@
     data_deps += [ "//chrome:chrome(//build/toolchain/linux:lacros_clang_x64)" ]
   }
 
-  if (is_linux) {
-    data_deps += [ "//components/crash/core/app:chrome_crashpad_handler" ]
-  }
-
   if (is_android) {
     public_deps += [
       ":test_support_ui_android",
--- b/components/crash/content/browser/BUILD.gn
+++ a/components/crash/content/browser/BUILD.gn
@@ -2,7 +2,6 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
-import("//build/config/chromecast_build.gni")
 import("//build/config/chromeos/ui_mode.gni")
 
 if (is_android) {
@@ -22,20 +21,25 @@
     "//content/public/common",
   ]
 
+  if (is_linux || is_chromeos || is_android) {
+    # Want this file on both Linux and Android.
-  if (is_castos || is_chromeos || is_android) {
     sources += [
       "crash_handler_host_linux.cc",
       "crash_handler_host_linux.h",
     ]
+
+    deps += [ "//build:chromeos_buildflags" ]
   }
 
+  if (!is_chromeos_ash) {
+    deps += [ "//third_party/crashpad/crashpad/client" ]
+  }
+
+  # This is not in the GYP build but this target includes breakpad client
+  # headers, so add the dependency here.
+  if ((is_posix && !is_ios) || is_fuchsia) {
-  if (is_castos || is_chromeos) {
     configs += [ "//third_party/breakpad:client_config" ]
     public_configs = [ "//third_party/breakpad:client_config" ]
-    deps += [
-      "//build:chromeos_buildflags",
-      "//third_party/breakpad:client",
-    ]
   }
 
   if (is_android) {
@@ -54,8 +58,9 @@
     deps += [
       "//components/crash/android:jni_headers",
       "//mojo/public/cpp/bindings",
-      "//third_party/crashpad/crashpad/client",
     ]
+  } else {
+    deps += [ "//third_party/breakpad:client" ]
   }
 }
 
--- b/components/crash/core/app/BUILD.gn
+++ a/components/crash/core/app/BUILD.gn
@@ -53,15 +53,12 @@
   ]
 
   if (is_linux || is_chromeos) {
-    sources += [ "crashpad_linux.cc" ]
-  }
-
-  if (is_chromeos || is_castos) {
     sources += [
       "breakpad_linux.cc",
       "breakpad_linux.h",
       "breakpad_linux_impl.cc",
       "breakpad_linux_impl.h",
+      "crashpad_linux.cc",
     ]
   }
 
@@ -104,7 +101,7 @@
     ]
   }
 
+  if (is_linux || is_chromeos) {
-  if (is_chromeos || is_castos) {
     deps += [ "//third_party/breakpad:client" ]
   }
 
--- b/components/crash/core/app/crashpad.h
+++ a/components/crash/core/app/crashpad.h
@@ -42,7 +42,7 @@
 
 namespace crash_reporter {
 
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
-#if BUILDFLAG(IS_CHROMEOS)
 bool IsCrashpadEnabled();
 #endif
 
--- b/components/crash/core/common/BUILD.gn
+++ a/components/crash/core/common/BUILD.gn
@@ -26,15 +26,15 @@
   }
 }
 
+use_crashpad_annotation =
+    (is_mac || is_win || is_android) && !use_crash_key_stubs
-use_crashpad_annotation = (is_mac || is_win || is_android ||
-                           (is_linux && !is_castos)) && !use_crash_key_stubs
 
 # Causes both Crashpad and Breakpad crash keys to be used. Both key
 # implementations will be instantiated and set, doubling the storage
 # used for keys. This is intended to be used temporarily to test Crashpad
 # integrations without disabling Breakpad.
+use_combined_annotations = ((is_ios && !is_cronet_build) || is_linux ||
+                            is_chromeos) && !use_crash_key_stubs
-use_combined_annotations =
-    ((is_ios && !is_cronet_build) || is_chromeos) && !use_crash_key_stubs
 
 buildflag_header("crash_buildflags") {
   header = "crash_buildflags.h"
@@ -190,7 +190,7 @@
     sources += [ "crash_key_breakpad_ios_unittest.cc" ]
     deps += [ "//third_party/breakpad:client" ]
     include_dirs = [ "//third_party/breakpad/breakpad/src/" ]
+  } else if (!is_mac && !is_win && !is_fuchsia && !is_android) {
-  } else if (is_castos || is_chromeos) {
     include_dirs = [ "//third_party/breakpad/breakpad/src/" ]
     sources += [ "crash_key_breakpad_unittest.cc" ]
   }
