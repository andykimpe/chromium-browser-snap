Description: Provide an implementation of std::equal_to, unavailable in the version of the stdlib in bionic,
  required since https://gn.googlesource.com/gn/+/387b368dfe63fec317f8e609d90c634807f2764e.
Author: Olivier Tilloy <olivier.tilloy@canonical.com>
Forwarded: not-needed

--- a/tools/gn/src/gn/unique_vector.h
+++ b/tools/gn/src/gn/unique_vector.h
@@ -44,6 +44,12 @@ struct UniqueVectorNode {
 
 using UniqueVectorHashTableBase = HashTableBase<UniqueVectorNode>;
 
+template <class T> struct equal_to {
+  bool operator()(const T& lhs, const T& rhs) const {
+    return lhs == rhs;
+  }
+};
+
 // A common HashSet implementation used by all UniqueVector instantiations.
 class UniqueVectorHashSet : public UniqueVectorHashTableBase {
  public:
@@ -56,7 +62,7 @@ class UniqueVectorHashSet : public Uniqu
   // |vector| is containing vector for existing items.
   //
   // Returns a non-null mutable Node pointer.
-  template <typename T, typename EqualTo = std::equal_to<T>>
+  template <typename T, typename EqualTo = equal_to<T>>
   Node* Lookup(size_t hash, const T& item, const std::vector<T>& vector) const {
     uint32_t hash32 = Node::ToHash32(hash);
     return BaseType::NodeLookup(hash32, [&](const Node* node) {
@@ -79,7 +85,7 @@ class UniqueVectorHashSet : public Uniqu
 // into.
 template <typename T,
           typename Hash = std::hash<T>,
-          typename EqualTo = std::equal_to<T>>
+          typename EqualTo = equal_to<T>>
 class UniqueVector {
  public:
   using Vector = std::vector<T>;
